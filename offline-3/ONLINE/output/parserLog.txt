Line 1: type_specifier : INT

int

Line 1: type_specifier : INT

int

Line 1: parameter_list : type_specifier ID

int a

Line 1: type_specifier : INT

int

Line 1: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 2: variable : ID

a

Line 2: factor : variable

a

Line 2: unary_expression : factor

a

Line 2: term : unary_expression

a

Line 2: simple_expression : term

a

Line 2: variable : ID

b

Line 2: factor : variable

b

Line 2: unary_expression : factor

b

Line 2: term : unary_expression

b

Line 2: simple_expression : simple_expression ADDOP term

a+b

Line 2: rel_expression : simple_expression

a+b

Line 2: logic_expression : rel_expression

a+b

Line 2: expression : logic_expression

a+b

Line 2: statement : RETURN expression SEMICOLON

return a+b ;

Line 2: statements : statement

return a+b ;

Line 3: compound_statement : LCURL statements RCURL

{
return a+b ;
}

ScopeTable # 1.1
0 --> < b : ID >
6 --> < a : ID >
ScopeTable # 1
0 --> < var : ID >

Line 3: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int var(int a,int b){
return a+b ;
}

Line 3: unit : func_definition

int var(int a,int b){
return a+b ;
}

Line 3: program : unit

int var(int a,int b){
return a+b ;
}

Line 6: type_specifier : INT

int

Line 7: type_specifier : FLOAT

float

Line 7: declaration_list : ID

d

Line 7: var_declaration : type_specifier declaration_list SEMICOLON

float d;

Line 7: statement : var_declaration

float d;

Line 7: statements : statement

float d;

Line 8: variable : ID

d

Line 8: factor : CONST_INT

1

Line 8: unary_expression : factor

1

Line 8: term : unary_expression

1

Line 8: simple_expression : term

1

Line 8: rel_expression : simple_expression

1

Line 8: logic_expression : rel_expression

1

Line 8: arguments : logic_expression

1

Line 8: factor : CONST_INT

2

Line 8: unary_expression : factor

2

Line 8: term : unary_expression

2

Line 8: factor : CONST_INT

3

Line 8: unary_expression : factor

3

Line 8: term : term MULOP unary_expression

2*3

Line 8: simple_expression : term

2*3

Line 8: rel_expression : simple_expression

2*3

Line 8: logic_expression : rel_expression

2*3

Line 8: arguments : arguments COMMA logic_expression

1,2*3

Line 8: argument_list : arguments

1,2*3

Line 8: factor : ID LPAREN argument_list RPAREN

var(1,2*3)

Line 8: unary_expression : factor

var(1,2*3)

Line 8: term : unary_expression

var(1,2*3)

Line 8: simple_expression : term

var(1,2*3)

Line 8: factor : CONST_FLOAT

3.5

Line 8: unary_expression : factor

3.5

Line 8: term : unary_expression

3.5

Line 8: factor : CONST_INT

2

Line 8: unary_expression : factor

2

Line 8: term : term MULOP unary_expression

3.5*2

Line 8: simple_expression : simple_expression ADDOP term

var(1,2*3)+3.5*2

Line 8: rel_expression : simple_expression

var(1,2*3)+3.5*2

Line 8: logic_expression : rel_expression

var(1,2*3)+3.5*2

Line 8: expression : variable ASSIGNOP logic_expression

d=var(1,2*3)+3.5*2

Line 8: expression_statement : expression SEMICOLON

d=var(1,2*3)+3.5*2;

Line 8: statement : expression_statement

d=var(1,2*3)+3.5*2;

Line 8: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;

Line 10: type_specifier : INT

int

Line 10: declaration_list : ID

i

Line 10: factor : CONST_INT

0

Line 10: unary_expression : factor

0

Line 10: term : unary_expression

0

Line 10: simple_expression : term

0

Line 10: rel_expression : simple_expression

0

Line 10: logic_expression : rel_expression

0

Line 10: var_declaration : type_specifier declaration_list SEMICOLON

int i=0;

Line 10: statement : var_declaration

int i=0;

Line 10: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;
int i=0;

Line 11: Continue outside loop

continue ;

Line 11: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;
int i=0;
continue ;

Line 12: Break outside loop

break ;

Line 12: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;
int i=0;
continue ;
break ;

Line 15: factor : CONST_INT

0

Line 15: unary_expression : factor

0

Line 15: term : unary_expression

0

Line 15: simple_expression : term

0

Line 15: rel_expression : simple_expression

0

Line 15: logic_expression : rel_expression

0

Line 15: expression : logic_expression

0

Line 15: statement : RETURN expression SEMICOLON

return 0 ;

Line 15: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;
int i=0;
continue ;
break ;
return 0 ;

Line 16: compound_statement : LCURL statements RCURL

{
float d;
d=var(1,2*3)+3.5*2;
int i=0;
continue ;
break ;
return 0 ;
}

ScopeTable # 1.2
0 --> < i : ID >
2 --> < d : ID >
ScopeTable # 1
0 --> < var : ID >
6 --> < main : ID >

Line 16: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
float d;
d=var(1,2*3)+3.5*2;
int i=0;
continue ;
break ;
return 0 ;
}

Line 16: unit : func_definition

int main(){
float d;
d=var(1,2*3)+3.5*2;
int i=0;
continue ;
break ;
return 0 ;
}

Line 16: program : program unit

int var(int a,int b){
return a+b ;
}
int main(){
float d;
d=var(1,2*3)+3.5*2;
int i=0;
continue ;
break ;
return 0 ;
}

Line 16: start : program

ScopeTable # 1
0 --> < var : ID >
6 --> < main : ID >

Total number of lines: 16
Total number of errors: 0
